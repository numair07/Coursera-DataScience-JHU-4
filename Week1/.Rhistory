1+1
example<- matrix(c(1,2,3,4,5,6,7,8),nrow=4,ncol =2 )
View(example)
example<- matrix(r(1,2,3,4,5,6,7,8),nrow=4,ncol =2 )
savehistory("~/nib.R")
example<- matrix(r(1,2,3,4,5,6,7,8),nrow=4,ncol =2 )
help() iris
library("swirl")
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5!=7
5==7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FLASE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor=11, num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(c(8, 4, 0), anonymous(x))
evaluate(head,c(8, 4, 0), anonymous(x))
evaluate(head,c(8, 4, 0))
anonymous(x)
evaluate(anonymous(x){x[1]},c(8,4,0))
evaluate(anonymous(x){x[1]}, c(8,4,0))
evaluate(anonymous(x, c(8,4,0))
d
evaluate(anonymous(x), c(8,4,0))
evaluate(anonymous(x){}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){tail(x,1)}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("TRUMP")
submit()
submit()
submit()
mad_libs("pune", "hey", "Numair")
submit()
submit()
`'I' %p 'love' %p 'R'`
`'I' %p% 'love' %p% 'R'`
`'I' %p% '`'love'%p%'R'`'`
`'I' %p 'love' %p 'R!'`
`'I' %p% 'love' %p% 'R!'`
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(dl)
class(d1)
unclass(d1)
d1
d2 <- as.date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1<- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(dl)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time(0>t1
t1
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units = 'days')
q()
x <- 1:10
if(x>5) {
x <- 0
}
x
f <- function (x) {
g <- function (y) {
y+z
}
z <- 4
x+g(x)
}
z <- 10
f(3)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
q()
x <- list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
x
lapply(x,function(elt), elt[, 1])
lapply(x,function(elt) elt[, 1])
matrix(rep(1),3,3)
x<- list(matrix(rep(1),3,3))
lapply(x,det)
a <- c(1,2,3,4,5,6,7,8)
b <- c(1,3,5,7,9,11,13)
mapply(mean,a,b)
b <- c(1,3,5,7,9,11,13,15)
mapply(mean,a,b)
x<-list(a=c(1,2), b=c(1,2,3))
y<-list(a=c(10,20), b=c(10,20,30))
mapply(mean,x,y)
firstList  <- list(a = 1:3, b = 4:6)
secondList <- list(c = 7:9, d = 10:12)
mapply(mean, firstList, secondList)
mapply(mean, c(firstList, secondList))
q()
library(xlsx)
version
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
BiocManager::install("rhdf5")
library("rhdf5")
created = h5createFile("example.h5")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "bar")
created = h5createGroup("example.h5", "foo/fooba")
h5ls("example.h5")
library(sqldf)
instal.packages("sqldf")
install.packages("sqldf")
library(sqldf)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "acs.csv")
acs <- read.csv("acs.csv")
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select unique * from acs")
sqldf("select AGEP where unique from acs")
sqldf("select distinct AGEP from acs")
GURL <- http://biostat.jhsph.edu/~jleek/contact.html
GURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
code <- readLines(GURL)
c(nchar(code[10]))
c(nchar(code[100]))
c(nchar(code[20]))
c(nchar(code[30]))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
read.fwf(fileUrl)
read.fwf(fileUrl, skip=4)
read.fwf(fileUrl, skip=4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
reader <- read.fwf(fileUrl, skip=4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
sum(reader[, 4])
q()
rep(1:9, len=54)
xtabs(break ~., data)
dir()
restData <- read.csv("Restaurants.csv")
s1 <- seq(1,10,by=2)
s1
q()
pow <- read.table("household_power_consumption.txt", header=TRUE, sep=";")
pow <- subset(pow, pow$Date=="1/2/2007" | pow$Date=="2/2/2007")
pow$Global_active_power <- as.numeric(pow$Global_active_power)
datetime <- as.POSIXct(paste(pow$Date, pow$Time), format="%d/%m/%Y %H:%M:%S")
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
plot(datetime, pow$Global_active_power, ylab="Global Active Power (kilowatts)", xlab="" , type="l")
plot(datetime, pow$Voltag, ylab="Voltage", xlab="datetime" , type="l")
sub_reading_1 <- as.numeric(pow$Sub_metering_1)
sub_reading_2 <- as.numeric(pow$Sub_metering_2)
sub_reading_3 <- as.numeric(pow$Sub_metering_3)
plot(datetime, sub_reading_1, ylab="Energy sub metering", xlab="", type="l")
lines(datetime, sub_reading_2, type="l", col="red")
lines(datetime, sub_reading_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, col=c("black", "red", "blue"), cex=0.5, bty="n")
plot(datetime, pow$Global_reactive_power, ylab="Global_reactive_Power", xlab="datetime" , type="l")
dev.off()
pow <- read.table("household_power_consumption.txt", header=TRUE, sep=";")
pow <- subset(pow, pow$Date=="1/2/2007" | pow$Date=="2/2/2007")
pow$Global_active_power <- as.numeric(pow$Global_active_power)
datetime <- as.POSIXct(paste(pow$Date, pow$Time), format="%d/%m/%Y %H:%M:%S")
sub_reading_1 <- as.numeric(pow$Sub_metering_1)
sub_reading_2 <- as.numeric(pow$Sub_metering_2)
sub_reading_3 <- as.numeric(pow$Sub_metering_3)
png("plot3.png", height=480, width=480)
plot(datetime, sub_reading_1, ylab="Energy sub metering", xlab="", type="l")
lines(datetime, sub_reading_2, type="l", col="red")
lines(datetime, sub_reading_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, col=c("black", "red", "blue"))
dev.off()
eq = function(x,y) {(x-7)-(7*(y-7))}
plot(eq(1:50), type="l")
plot(eq(1:50, 1:10), type="l")
eq = function(x,y) {(x-7)-(7*(y-7)=0)}
plot(eq(1:50, 1:10), type="l")
eq = function(x,y) {(x-7)=(7*(y-7))}
plot(eq(1:50, 1:10), type="l")
eq = function(x,y) {x<-(7*(y-7))+7}
plot(eq(1:50, 1:10), type="l")
plot(eq(1:100,0), type="l")
plot(eq(1:50, 1:10), type="l")
